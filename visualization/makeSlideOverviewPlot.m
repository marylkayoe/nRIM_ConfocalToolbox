function slideOverviewImage = makeSlideOverviewPlot(slideImageData, varargin)
    % this function will take image data opened from a CZI file
    % and will  generate a collage image where each of the stacks in the slide data
    % is presented by a single image.

    % IMPORTANT: this is meant to be used with a file where all the stacks have identical dimensions

    % if you want to use this with a file where the stacks have different dimensions, there will be another function for that

    % input arguments:
    % slideImageData: a cell array, each cell contains the image data for a single stack
    % varargin: optional arguments given  as 'parameter', value pairs

    % the single image is std projected (default unless 'maxProject' is true)
    %and then the images are arranged in a grid.
    % the function will also return the image data for the collage image

    % if no grid layout is given, the function will try to make a rectangle grid
    % example grid layout: [2 3] will have 2 rows, 3 columns

    % input data is a cell array, each cell contains the image data for a single stack
    % metaData is a structure that contains the metadata for the image data, generated by the
    % function importZeissStack

    % example use:
    % makeSlideOverviewPlot(slideImageData, 'maxProject', true, 'gridLayout', [2 3], 'metaData', imageInfo, 'downsample', 0.5);

    %% some constant parameters for the visualization:
    LABELFONTSIZE = 200;
    LABELCOLOR = 'white';

    % parse input
    p = inputParser;

    % required input
    p.addRequired('slideImageData', @(x) iscell(x));

    % optional input
    p.addParameter('maxProject', true, @islogical);
    p.addParameter('gridLayout', [], @isnumeric);
    p.addParameter('metaData', [], @isstruct)
    p.addParameter('downsample', 0.5, @isnumeric); % downsample the image by this factor (0.5 = half size)

    % parse the input
    p.parse(slideImageData, varargin{:});

    nSLICES = length(slideImageData);

    % make projection images
    if p.Results.maxProject

        for i = 1:nSLICES
            adjustedImage = adjustHistogram(slideImageData{i});
            slideOverview{i} = max(adjustedImage, [], 3);
        end

    else

        for i = 1:nSLICES
            adjustedImage = double(adjustHistogram(slideImageData{i}));
            slideOverview{i} = std(adjustedImage, 0, 3);
            %slideOverview{i} = mean(adjustedImage, 3);
        end

    end

    % make a grid layout
    if isempty(p.Results.gridLayout)
        % try to make a rectangle grid
        nRows = floor(sqrt(nSLICES));
        nCols = ceil(nSLICES / nRows);
    else
        nRows = p.Results.gridLayout(1);
        nCols = p.Results.gridLayout(2);
    end

    % make the collage image
    slideOverviewImage = zeros(size(slideOverview{1}, 1) * nRows, size(slideOverview{1}, 2) * nCols);

    for slice = 1:nSLICES
        [row, col] = ind2sub([nRows, nCols], slice);
        slideOverviewImage((row - 1) * size(slideOverview{1}, 1) + 1:row * size(slideOverview{1}, 1), (col - 1) * size(slideOverview{1}, 2) + 1:col * size(slideOverview{1}, 2)) = slideOverview{slice};

    end

    % normalize the image and convert to RGB
    slideOverviewImage = uint16(slideOverviewImage / max(slideOverviewImage(:)) * 2 ^ 16);

    if ismatrix(slideOverviewImage)
        slideOverviewImage = repmat(slideOverviewImage, 1, 1, 3);
    end

    % Add text annotations (slice numbers) in the center of each tile
    for slice = 1:nSLICES
        [row, col] = ind2sub([nRows, nCols], slice);
        position = [(col - 1) * size(slideOverview{1}, 2) + 100, (row - 1) * size(slideOverview{1}, 1) + 200]; % Example position
        slideOverviewImage = insertText(slideOverviewImage, position, ['Slice ' num2str(slice)], 'FontSize', LABELFONTSIZE, 'TextColor', LABELCOLOR, 'BoxOpacity', 0);
    end

    % if metadata is provided, add scale bar and save the image
    if isempty(p.Results.metaData)
        disp('No metadata provided, no scale info, not saving the image.');
    else
        metaData = p.Results.metaData;
        % scale bar
        [xyResolution, zResolution] = getPixelResolution(metaData);
        % draw scale bar at the bottom right of the image
        scaleBarLength = 500; % in microns
        scaleBarWidth = 100; % in pixels

        scaleBarStartX = size(slideOverviewImage, 2) - 500 - scaleBarLength / xyResolution;
        scaleBarStartY = size(slideOverviewImage, 1) - 200;

        % Draw scale bar (adjust parameters as needed)
        scaleBarPosition = [scaleBarStartX, scaleBarStartY, scaleBarLength / xyResolution, scaleBarWidth];
        slideOverviewImage = insertShape(slideOverviewImage, 'FilledRectangle', scaleBarPosition, 'Color', LABELCOLOR);

        % add scale bar label
        scaleBarLabelPosition = [scaleBarStartX - 200, scaleBarStartY - 300];
        slideOverviewImage = insertText(slideOverviewImage, scaleBarLabelPosition, [num2str(scaleBarLength) 'um'], 'FontSize', 200, 'TextColor', LABELCOLOR, 'BoxOpacity', 0);

        % add title
        % format: filename - objective - zoom - excitationWL - laserpower - date
        % e.g. '2018-01-01_10-00-00.czi - 20x - 1.0x zoom  - 488nm - 0.03% - 2018-01-01'
        titleString = [metaData.Filename '-' num2str(metaData.ObjMag) 'x-' num2str(metaData.zoom) 'x-Ex: ' num2str(metaData.LaserWL) '-power: ' num2str(metaData.LaserPower) ' Acquisition date: ' metaData.acqDate];
        titleString = cleanUnderscores(titleString);
        title(titleString, 'FontSize', 10);

        % save the image as a png, together with the labels and scale bar

        % convert to 8-bit image
        slideOverviewImage = uint8(slideOverviewImage / 2 ^ 8);

        slideOverviewImage = imresize(slideOverviewImage, p.Results.downsample);

        % separate the filename from the extension
        [filepath, filenameroot, ext] = fileparts(metaData.Filename);
        pngFileName = [filenameroot '_overview.png'];
        savePath = fullfile(metaData.FilePath, pngFileName);
        imwrite(slideOverviewImage, savePath, 'png');
        disp(['Saved slide overview image as ' savePath]);

    end

    % show the image
    figure;
    imshow(slideOverviewImage, []);

end
